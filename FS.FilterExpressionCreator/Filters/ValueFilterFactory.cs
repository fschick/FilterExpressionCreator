using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace FS.FilterExpressionCreator.Filters
{
    /// <summary>
    /// Factory methods for <see cref="ValueFilter"/>.
    /// </summary>
    /// <autogeneratedoc />
    public static class ValueFilterFactory
    {
        /// <summary>
        /// Creates filter micro syntax string from <see cref="ValueFilter"/>.
        /// </summary>
        /// <param name="filters">The filters.</param>
        /// <autogeneratedoc />
        public static string ToString(ValueFilter[] filters)
        {
            if (filters == null)
                return null;

            var filterStrings = filters
                .Where(x => x != null)
                .Select(x => x.ToString().Replace(",", "\\,"));

            return string.Join(",", filterStrings);
        }

        /// <summary>
        /// Create <see cref="ValueFilter"/> from filterSyntax.
        /// </summary>
        /// <param name="filterSyntax">The filter micro syntax to create the filter from.</param>
        public static ValueFilter[] Create(string filterSyntax)
        {
            var filters = SplitValues(filterSyntax);
            return filters.Select(ValueFilter.Create).ToArray();
        }

        private static IEnumerable<string> SplitValues(string filterSyntax)
        {
            if (filterSyntax == null)
                return null;

            return Regex
                .Split(filterSyntax, @"(?<!\\)[\|,]")
                .Select(element => element
                    .Replace(@"\|", @"|")
                    .Replace(@"\,", @",")
                    .Replace(@"\\", @"\")
                )
                .ToArray();
        }
    }
}
