using FS.FilterExpressionCreator.Filters;
using FS.FilterExpressionCreator.Swashbuckle.Filters;
using Microsoft.Extensions.DependencyInjection;
using Swashbuckle.AspNetCore.SwaggerGen;
using System;
using System.Collections.Generic;

namespace FS.FilterExpressionCreator.Swashbuckle.Extensions;

/// <summary>
/// Extensions to register entity filter extensions to Swashbuckle.AspNetCore (https://github.com/domaindrivendev/Swashbuckle.AspNetCore)
/// </summary>
/// <autogeneratedoc />
[Obsolete("Use 'Plainquire.Filter.Swashbuckle.SwaggerGenOptionsExtensions' instead.")]
public static class SwaggerGenOptionsExtensions
{
    /// <summary>
    /// Replaces action parameters of type <see cref="EntityFilter{TEntity}"/> with filterable properties of type <c>TEntity</c>.
    /// </summary>
    /// <param name="options">The options.</param>
    /// <param name="xmlDocumentationFilePaths">Paths to XML documentation files. Used to provide parameter descriptions.</param>
    public static SwaggerGenOptions AddFilterExpressionSupport(this SwaggerGenOptions options, params string[] xmlDocumentationFilePaths)
    {
        options.OperationFilter<EntityFilterParameterReplacer>(new List<string>(xmlDocumentationFilePaths));
        options.OperationFilter<EntityFilterSetParameterReplacer>(new List<string>(xmlDocumentationFilePaths));
        return options;
    }

    /// <inheritdoc cref="AddFilterExpressionSupport(SwaggerGenOptions, string[])" />
    [Obsolete("Use Plainquire.Filter.Swashbuckle.SwaggerGenOptionsExtensions.AddFilterSupport instead.")]
    public static SwaggerGenOptions AddFilterExpressionsSupport(this SwaggerGenOptions options, params string[] xmlDocumentationFilePaths)
        => AddFilterExpressionSupport(options, xmlDocumentationFilePaths);
}