using FS.SortQueryableCreator.Abstractions.Configurations;
using FS.SortQueryableCreator.Sorts;
using System.Linq;

namespace FS.SortQueryableCreator.Interfaces;

/// <summary>
/// Interceptor to provide custom filter logic for filtered properties.
/// </summary>
/// <autogeneratedoc />
public interface IPropertySortQueryableInterceptor
{
    /// <summary>
    /// Sorts the elements of a sequence according to the given <paramref name="sort"/>.
    /// </summary>
    /// <typeparam name="TEntity">The type of the sorted entity.</typeparam>
    /// <param name="source">A sequence of values to sort.</param>
    /// <param name="sort">The sort order.</param>
    /// <param name="configuration">The active sort order configuration</param>
    /// <returns>An <see cref="IOrderedEnumerable{TEntity}"/> with applied sort order or <c>null</c> to use the default sort order.</returns>
    public IOrderedQueryable<TEntity>? OrderBy<TEntity>(IQueryable<TEntity> source, PropertySort sort, SortConfiguration? configuration = null);

    /// <summary>
    /// Performs a subsequent ordering of a sequence according to the given <paramref name="sort"/>.
    /// </summary>
    /// <typeparam name="TEntity">The type of the sorted entity.</typeparam>
    /// <param name="source">A sequence of values to sort.</param>
    /// <param name="sort">The sort order.</param>
    /// <param name="configuration">The active sort order configuration</param>
    /// <returns>An <see cref="IOrderedEnumerable{TEntity}"/> with applied sort order or <c>null</c> to use the default sort order.</returns>
    public IOrderedQueryable<TEntity>? ThenBy<TEntity>(IOrderedQueryable<TEntity> source, PropertySort sort, SortConfiguration? configuration = null);
}