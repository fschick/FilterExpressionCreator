using Plainquire.Filter.Abstractions;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Plainquire.Sort;

/// <summary>
/// Extension methods for <see cref="Type"/>.
/// </summary>
internal static class TypeExtensions
{
    /// <summary>
    /// Returns <c>true</c> when the value of then given type can be <c>null</c>; otherwise <c>false</c>.
    /// </summary>
    /// <param name="type">The type to check.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public static bool IsNullable(this Type type)
    {
        if (type == null)
            throw new ArgumentNullException(nameof(type));

        if (type.IsClass)
            return true;

        return type.IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>);
    }

    /// <summary>
    /// Determines whether the given type is <see cref="EntitySort{TEntity}"/>.
    /// </summary>
    /// <param name="type">The type.</param>
    /// <autogeneratedoc />
    public static bool IsGenericEntitySort(this Type type)
        => type.IsGenericType && type.GetGenericTypeDefinition() == typeof(EntitySort<>);

    /// <summary>
    /// Gets all properties sortable by <see cref="EntitySort"/>.
    /// </summary>
    /// <param name="type">The type.</param>
    /// <autogeneratedoc />
    public static IEnumerable<PropertyInfo> GetSortableProperties(this Type type)
        => type.GetProperties().Where(property => property.IsPropertySortable());

    /// <summary>
    /// Determines whether this parameter is visible as (MVC controller action) parameter.
    /// </summary>
    /// <param name="member">The member.</param>
    /// <autogeneratedoc />
    private static bool IsPropertySortable(this PropertyInfo member)
    {
        var isEnumerable = member.PropertyType != typeof(string) && typeof(IEnumerable).IsAssignableFrom(member.PropertyType);
        var isFilterEntity = member.PropertyType.GetCustomAttribute<FilterEntityAttribute>() != null;
        var filterAttribute = member.GetCustomAttribute<FilterAttribute>();

        return (isEnumerable || isFilterEntity)
            ? filterAttribute?.Sortable == true
            : filterAttribute?.Sortable != false;
    }
}