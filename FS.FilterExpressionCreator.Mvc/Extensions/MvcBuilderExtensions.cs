using FS.FilterExpressionCreator.Mvc.ModelBinders;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace FS.FilterExpressionCreator.Mvc.Extensions;

/// <summary>
/// Extensions to register entity filter extensions to MVC
/// </summary>
[Obsolete("Use 'Plainquire.Filter.Mvc.MvcBuilderExtensions' instead.")]
public static class MvcBuilderExtensions
{
    /// <summary>
    /// Registers filter expression creators specific model binders.
    /// </summary>
    /// <param name="mvcBuilder">The MVC builder.</param>
    /// <autogeneratedoc />
    public static IMvcBuilder AddFilterExpressionSupport(this IMvcBuilder mvcBuilder)
    {
        mvcBuilder.Services.Configure<MvcOptions>(options =>
        {
            options.ModelBinderProviders.Insert(0, new EntityFilterModelBinderProvider());
            options.ModelBinderProviders.Insert(0, new EntityFilterSetModelBinderProvider());
        });

        return mvcBuilder;
    }

    /// <inheritdoc cref="AddFilterExpressionSupport(IMvcBuilder)" />
    [Obsolete("Use Plainquire.Filter.Mvc.MvcBuilderExtensions.AddFilterSupport instead.")]
    public static IMvcBuilder AddFilterExpressionsSupport(this IMvcBuilder mvcBuilder)
        => AddFilterExpressionSupport(mvcBuilder);
}