using Schick.Plainquire.Filter.Newtonsoft.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using System;

namespace Schick.Plainquire.Filter.Mvc.Newtonsoft.Extensions;

/// <summary>
/// Extensions to register entity filter extensions to MVC
/// </summary>
public static class MvcBuilderExtensions
{
    /// <summary>
    /// Adds support to serialize/deserialize filter expression creator related classes to MVC pipeline.
    /// </summary>
    /// <param name="mvcBuilder">The MVC builder.</param>
    /// <autogeneratedoc />
    public static IMvcBuilder AddFilterExpressionNewtonsoftSupport(this IMvcBuilder mvcBuilder)
    {
        mvcBuilder.Services.Configure<MvcNewtonsoftJsonOptions>(options =>
        {
            options.SerializerSettings.Converters.AddFilterExpressionNewtonsoftSupport();
        });

        return mvcBuilder;
    }

    /// <inheritdoc cref="AddFilterExpressionNewtonsoftSupport(IMvcBuilder)" />
    [Obsolete("Use AddFilterExpressionNewtonsoftSupport(IMvcBuilder) instead.")]
    public static IMvcBuilder AddFilterExpressionsNewtonsoftSupport(this IMvcBuilder mvcBuilder)
        => AddFilterExpressionNewtonsoftSupport(mvcBuilder);
}